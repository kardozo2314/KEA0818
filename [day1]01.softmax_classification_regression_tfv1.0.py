{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyNX5KYK4UnkdGBT0udE7e12"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["# 1. Tensorflow 라이브러리 설치\n","##### TensorFlow는 구글이 개발한 머신러닝 및 딥러닝 오픈소스 프레임워크입니다. 🧠 쉽게 말해, 인공지능 모델을 만들고 훈련시키는 데 필요한 다양한 도구를 모아놓은 강력한 라이브러리라고 할 수 있죠. 복잡한 수학 연산과 대규모 데이터 처리를 효율적으로 수행할 수 있도록 설계되었습니다.\n","\n","### 1.1 주요 특징 및 장점 👍\n"," - 유연성과 확장성: CPU, GPU는 물론, 모바일 기기나 엣지 디바이스에서 모델을 실행할 수 있도록 지원하는 TensorFlow Lite, 웹 브라우저에서 실행 가능한 TensorFlow.js 등 다양한 플랫폼을 지원합니다. 연구를 위한 복잡한 모델부터 실제 서비스 배포까지 모두 가능합니다.\n","\n"," - 강력한 생태계: 모델의 학습 과정을 시각화하고 분석하는 TensorBoard, 고수준 API로 모델을 쉽게 만들 수 있는 Keras, 사전 훈련된 모델을 공유하는 TensorFlow Hub 등 강력하고 다양한 도구들을 제공하여 개발 생산성을 크게 높여줍니다.\n","\n"," - 풍부한 자료와 커뮤니티: 구글의 지원을 받는 만큼 공식 문서, 튜토리얼, 예제 코드가 매우 풍부합니다. 또한, 전 세계의 수많은 개발자가 사용하는 덕분에 문제가 발생했을 때 해결책을 찾기 쉬운 거대한 커뮤니티를 가지고 있습니다.\n","\n","### 1.2 주요 사용 분야 🚀\n"," TensorFlow는 거의 모든 머신러닝 및 딥러닝 분야에서 활용될 수 있습니다.\n","\n"," - 이미지 인식 및 분류: 사진 속 객체(고양이, 자동차 등)를 식별하거나, 의료 영상(CT, MRI)을 분석하여 질병을 진단합니다.\n","\n"," - 자연어 처리 (NLP): 문장의 의미를 파악하여 번역하거나(Google 번역), 감정을 분석하고, 챗봇을 만드는 데 사용됩니다.\n","\n"," - 음성 인식: 사용자의 음성을 텍스트로 변환하는 기술(Google 어시스턴트 등)에 활용됩니다.\n","\n"," - 시계열 예측: 주식 가격, 날씨, 전력 수요 등 시간의 흐름에 따른 데이터를 분석하고 미래를 예측합니다.\n","\n"," - 추천 시스템: 사용자의 과거 행동 데이터를 기반으로 좋아할 만한 영화나 상품을 추천합니다.\n","\n","\n","\n","---\n","\n"],"metadata":{"id":"rGGWki7IarO3"}},{"cell_type":"code","source":["# 'pip'이라는 파이썬 패키지 관리자를 사용하여 tensorflow' 라이브러리를 설치합니다.\n","# '!'는 코랩(Colab)이나 주피터 노트북(Jupyter Notebook)과 같은 환경에서 터미널(명령 프롬프트) 명령어를 직접 실행할 때 사용하는 특수 문자입니다.\n","# 즉, 파이썬 코드가 아니라 시스템에 명령을 내리는 부분입니다.\n","# 따라서, 이 코드를 실행하면 TensorFlow 라이브러리가 현재 환경에 다운로드 및 설치됩니다.\n","# TensorFlow가 이미 설치되어 있다면, 기존 버전 정보를 보여주거나 최신 버전으로 업데이트할 수 있습니다.\n","\n","!pip install tensorflow"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OAMl4sblctEP","executionInfo":{"status":"ok","timestamp":1755324240525,"user_tz":-540,"elapsed":5873,"user":{"displayName":"똥깡아제","userId":"13219049976116428546"}},"outputId":"bf720a3d-69bc-4d1b-98b6-4aab520f61e2"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: tensorflow in /usr/local/lib/python3.11/dist-packages (2.19.0)\n","Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.4.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (25.2.10)\n","Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.6.0)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (18.1.1)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.4.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from tensorflow) (25.0)\n","Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (5.29.5)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.32.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from tensorflow) (75.2.0)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.17.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.1.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (4.14.1)\n","Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.17.3)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.74.0)\n","Requirement already satisfied: tensorboard~=2.19.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.19.0)\n","Requirement already satisfied: keras>=3.5.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.10.0)\n","Requirement already satisfied: numpy<2.2.0,>=1.26.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.0.2)\n","Requirement already satisfied: h5py>=3.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.14.0)\n","Requirement already satisfied: ml-dtypes<1.0.0,>=0.5.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.5.3)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.37.1)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from astunparse>=1.6.0->tensorflow) (0.45.1)\n","Requirement already satisfied: rich in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (13.9.4)\n","Requirement already satisfied: namex in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (0.1.0)\n","Requirement already satisfied: optree in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (0.17.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.4.3)\n","Requirement already satisfied: tensorflow in /usr/local/lib/python3.11/dist-packages (2.19.0)\n","Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.4.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (25.2.10)\n","Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.6.0)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (18.1.1)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.4.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from tensorflow) (25.0)\n","Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (5.29.5)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.32.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from tensorflow) (75.2.0)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.17.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.1.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (4.14.1)\n","Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.17.3)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.74.0)\n","Requirement already satisfied: tensorboard~=2.19.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.19.0)\n","Requirement already satisfied: keras>=3.5.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.10.0)\n","Requirement already satisfied: numpy<2.2.0,>=1.26.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.0.2)\n","Requirement already satisfied: h5py>=3.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.14.0)\n","Requirement already satisfied: ml-dtypes<1.0.0,>=0.5.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.5.3)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.37.1)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from astunparse>=1.6.0->tensorflow) (0.45.1)\n","Requirement already satisfied: rich in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (13.9.4)\n","Requirement already satisfied: namex in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (0.1.0)\n","Requirement already satisfied: optree in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (0.17.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.4.3)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (2.5.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (2025.8.3)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.11/dist-packages (from tensorboard~=2.19.0->tensorflow) (3.8.2)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from tensorboard~=2.19.0->tensorflow) (0.7.2)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from tensorboard~=2.19.0->tensorflow) (3.1.3)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from werkzeug>=1.0.1->tensorboard~=2.19.0->tensorflow) (3.0.2)\n","Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.5.0->tensorflow) (4.0.0)\n","Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.5.0->tensorflow) (2.19.2)\n","Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.5.0->tensorflow) (0.1.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (2.5.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (2025.8.3)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.11/dist-packages (from tensorboard~=2.19.0->tensorflow) (3.8.2)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from tensorboard~=2.19.0->tensorflow) (0.7.2)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from tensorboard~=2.19.0->tensorflow) (3.1.3)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from werkzeug>=1.0.1->tensorboard~=2.19.0->tensorflow) (3.0.2)\n","Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.5.0->tensorflow) (4.0.0)\n","Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.5.0->tensorflow) (2.19.2)\n","Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.5.0->tensorflow) (0.1.2)\n"]}]},{"cell_type":"markdown","source":["# 2. MNIST 손글씨 분류(softmax 기법 활용) 모델 테스트\n","##### MNIST(MNIST 분류 모델은 손으로 쓴 숫자 이미지(0~9)를 보고 해당 이미지가 어떤 숫자인지 맞추도록 훈련된 머신러닝 또는 딥러닝 모델) 손글씨 숫자 데이터셋을 분류하는 모델을 만들어 보겠습니다.\n","우리의 목표는 이와 같은 손글씨 이미지들을 보고, 컴퓨터가 '이건 숫자 7이야!', '이건 1이야!' 하고 맞추게 하는 것입니다.\n","\n","\n","\n"],"metadata":{"id":"iZeNSr27lJhI"}},{"cell_type":"markdown","source":["## 2.1 데이터 로딩 및 전처리"],"metadata":{"id":"x4kuaJaulw7o"}},{"cell_type":"code","source":["import tensorflow as tf\n","\n","# MNIST 데이터를 다운로드 합니다.\n","(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n","\n","# 이미지들을 float32 데이터 타입으로 변경합니다.\n","x_train, x_test = x_train.astype('float32'), x_test.astype('float32')\n","\n","# 28*28 형태의 이미지를 784차원으로 flattening 합니다.\n","x_train, x_test = x_train.reshape([-1, 784]), x_test.reshape([-1, 784])\n","\n","# [0, 255] 사이의 값을 [0, 1]사이의 값으로 Normalize합니다.\n","x_train, x_test = x_train / 255., x_test / 255.\n","\n","# 레이블 데이터에 one-hot encoding을 적용합니다.\n","y_train, y_test = tf.one_hot(y_train, depth=10), tf.one_hot(y_test, depth=10)\n"],"metadata":{"id":"Nz8L4xugZ6mA","executionInfo":{"status":"ok","timestamp":1755328283202,"user_tz":-540,"elapsed":490,"user":{"displayName":"똥깡아제","userId":"13219049976116428546"}}},"execution_count":22,"outputs":[]},{"cell_type":"markdown","source":["- 모델을 훈련시키기 전에 **데이터 전처리(Preprocessing)**라는 재료 손질 과정을 거쳐야 합니다.\n","\n","- mnist.load_data(): 먼저 keras에 내장된 기능으로 MNIST 데이터셋을 다운로드합니다. 훈련용 데이터 6만 개와 시험용 데이터 1만 개가 들어있어요.\n","\n","- reshape([-1, 784]): 이미지는 28x28 픽셀의 2차원 행렬이지만, 우리 모델은 1차원 벡터를 입력으로 받습니다. 그래서 28x28 이미지를 784개의 숫자 리스트로 쭉 펼쳐주는 flattening 작업을 수행합니다.\n","\n","- ... x_train, x_test/ 255.: \"이건 정규화(Normalization) 과정입니다. 원래 0~255\n","사이의 값을 갖는 픽셀 밝기를 0~1 사이의 값으로 바꿔주는 거죠. 이렇게 데이터의\n","단위를 맞춰주면 모델이 훨씬 안정적으로 학습합니다.\n","\n","- tf.one_hot(): \"우리가 바로 직전에 배운 원-핫 인코딩입니다! 정답 레이블이 그냥 숫자 7, 1, 0... 이렇게 되어 있는데, 이걸 [0,0,0,0,0,0,0,1,0,0] 과 같은 원-핫 벡터로 바꿔주는 거죠. 숫자는 0부터 9까지 총 10개이므로 depth=10으로 설정합니다.\"\n"],"metadata":{"id":"2Z6gnZyJnjUv"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt  # 이미지 출력을 위한 라이브러리 import\n","import numpy as np # numpy 라이브러리 import\n","\n","# 첫 번째 학습용 이미지 출력\n","# Reshape the flattened image data back to 28x28\n","image_to_display = np.reshape(x_train[0], (28, 28))\n","\n","plt.imshow(image_to_display, cmap='gray') # 28x28 이미지를 흑백(gray)으로 표시\n","# The label is one-hot encoded, so we need to find the index of the hot element\n","label_index = tf.argmax(y_train[0]).numpy()\n","plt.title(f\"Label: {label_index}\")  # 이미지의 제목으로 실제 정답 숫자(Label)를 표시\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":452},"id":"K47HBH35t-JU","executionInfo":{"status":"ok","timestamp":1755328444017,"user_tz":-540,"elapsed":166,"user":{"displayName":"똥깡아제","userId":"13219049976116428546"}},"outputId":"d89f0eb6-f86b-409f-8562-4a1149119e40"},"execution_count":29,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# 첫 번째 학습용 이미지의 레이블(정답) 출력\n","print(f\"y_train[0] (레이블): {y_train[0]}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BYVuXeq3ugRq","executionInfo":{"status":"ok","timestamp":1755328612510,"user_tz":-540,"elapsed":76,"user":{"displayName":"똥깡아제","userId":"13219049976116428546"}},"outputId":"788f3fd5-7144-43cb-b871-9a1950495ed4"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["y_train[0] (레이블): [0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]\n"]}]},{"cell_type":"markdown","source":["## 2.2 데이터 파이프라인 생성"],"metadata":{"id":"owOZZHLQn8Su"}},{"cell_type":"code","source":["# tf.data API를 이용해서 데이터를 섞고 batch 형태로 가져옵니다.\n","train_data = tf.data.Dataset.from_tensor_slices((x_train, y_train))\n","train_data = train_data.repeat().shuffle(60000).batch(100)\n","train_data_iter = iter(train_data)"],"metadata":{"id":"hmdLWyHQoTKF","executionInfo":{"status":"ok","timestamp":1755327616868,"user_tz":-540,"elapsed":539,"user":{"displayName":"똥깡아제","userId":"13219049976116428546"}}},"execution_count":16,"outputs":[]},{"cell_type":"markdown","source":["\n","- 6만 개의 데이터를 한 번에 모델에 넣으면 너무 커서 컴퓨터가 힘들어할 겁니다. 그래서 데이터를 효율적으로 공급해 줄 **'데이터 파이프라인'**을 만들겠습니다.\n","\n","- shuffle(60000): 데이터를 훈련시키기 전에 카드를 섞듯이 순서를 마구 섞어줍니다. 혹시 데이터가 순서대로 정렬되어 있을 경우, 모델이 그 순서까지 학습하는 것을 방지하기 위함이죠.\n","\n","- batch(100): 미니배치 작업입니다. 전체 데이터를 100개씩 묶어서 작은 덩어리로 만들어달라는 뜻입니다. 모델은 이 100개짜리 미니배치를 하나씩 먹으면서 학습하게 됩니다.\n","\n"],"metadata":{"id":"FvVKeMJ4oojM"}},{"cell_type":"markdown","source":["## 2.3 모델, 손실 함수, 최적화 정의"],"metadata":{"id":"_NOXpfvWpBsE"}},{"cell_type":"code","source":["# tf.keras.Model을 이용해서 Softmax Regression 모델을 정의합니다.\n","class SoftmaxRegression(tf.keras.Model):\n","  def __init__(self):\n","    super(SoftmaxRegression, self).__init__()\n","    self.softmax_layer = tf.keras.layers.Dense(10,\n","                                               activation=None,\n","                                               kernel_initializer='zeros',\n","                                               bias_initializer='zeros')\n","\n","  def call(self, x):\n","    logits = self.softmax_layer(x)\n","\n","    return tf.nn.softmax(logits)"],"metadata":{"id":"tMJzy4mhdRkq","executionInfo":{"status":"ok","timestamp":1755327619018,"user_tz":-540,"elapsed":3,"user":{"displayName":"똥깡아제","userId":"13219049976116428546"}}},"execution_count":17,"outputs":[]},{"cell_type":"markdown","source":["tf.keras.layers.Dense(10, ...): 모델의 핵심 부품인 Dense 레이어를 하나 만듭니다. Dense는 입력과 출력을 모두 연결해주는 가장 기본적인 신경망 층입니다.\n","\n","- 10: 출력의 개수입니다. 우리는 0부터 9까지, 총 10개의 숫자를 분류해야 하므로 출력 개수를 10으로 설정합니다.\n","\n","- kernel_initializer='zeros', bias_initializer='zeros': Dense 레이어의 W(가중치, kernel)와 b(편향, bias)를 처음에는 모두 0으로 시작하라고 설정하는 부분입니다.\n","\n","call(self, x): 모델의 행동 방식\n","이 부분은 실제 데이터 x가 모델에 들어왔을 때, 어떤 계산 과정을 거쳐 결과를 내보낼지를 정의합니다.\n","\n","- logits = self.softmax_layer(x): 입력 데이터 x (784개의 픽셀 값)가 __init__에서 만든 Dense 레이어를 통과합니다. 여기서 Wx + b 계산이 수행되고, 그 결과로 각 숫자(0~9)에 대한 원시 점수인 **로짓(logits)**이 나옵니다.\n","\n","- return tf.nn.softmax(logits): 이 원시 점수(logits)를 소프트맥스 함수에 넣어 최종 결과를 반환합니다. 소프트맥스는 이 점수들을 합이 1이 되는 확률로 바꿔줍니다. 예를 들어, [0.1, 0.05, 0.8, ...] 와 같이 '이 이미지가 숫자 2일 확률은 80%'라는 식으로 해석할 수 있는 값을 만들어냅니다.\n","\n"],"metadata":{"id":"dIvjN0Ppp4a0"}},{"cell_type":"code","source":["# cross-entropy 손실 함수를 정의합니다.\n","@tf.function\n","def cross_entropy_loss(y_pred, y):\n","  return tf.reduce_mean(-tf.reduce_sum(y * tf.math.log(y_pred), axis=[1]))\n","  #return tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logtis, labels=y))\n","  # tf.nn.softmax_cross_entropy_with_logits API를 이용한 구현\n","\n","# 최적화를 위한 그라디언트 디센트 옵티마이저를 정의합니다.\n","optimizer = tf.optimizers.SGD(0.5)\n"],"metadata":{"id":"pCQkjzt7qGOb","executionInfo":{"status":"ok","timestamp":1755327621652,"user_tz":-540,"elapsed":4,"user":{"displayName":"똥깡아제","userId":"13219049976116428546"}}},"execution_count":18,"outputs":[]},{"cell_type":"markdown","source":["모델의 예측(y_pred)이 실제 정답(y)과 얼마나 다른지를 측정하여 **벌점(손실 값)**을 계산합니다.\n","\n","- tf.math.log(y_pred): 모델이 예측한 확률 값에 로그를 씌웁니다. 정답을 0에 가깝게 예측할수록(자신 있게 틀릴수록) 로그 값은 음의 무한대에 가까워져 페널티가 기하급수적으로 커집니다.\n","\n","- y * ...: 실제 정답 y와 위에서 계산한 로그 값을 곱합니다. y는 정답인 위치만 1이고 나머지는 0이므로, 이 계산을 통해 모델이 정답이라고 예측한 확률 값이 얼마인지만 정확히 집어낼 수 있습니다.\n","\n","- tf.reduce_sum(..., axis=[1]): 각 데이터에 대한 최종 손실 값을 계산합니다. 앞에 -를 붙여 양수로 만들어주고, 합계를 구합니다.\n","\n","- tf.reduce_mean(...): 미니배치에 포함된 모든 데이터의 손실 값에 대한 평균을 내어, 해당 배치의 최종 손실 값을 구합니다.\n","\n","- tf.optimizers.SGD: 최적화 알고리즘으로 **SGD(확률적 경사 하강법)**를 사용하겠다는 의미입니다. 미니배치 데이터를 사용하여 계산된 기울기(gradient)를 따라 손실이 줄어드는 방향으로 파라미터를 업데이트하는 가장 기본적인 방법입니다.\n","\n","- 0.5: **학습률(Learning Rate)**입니다. 손실을 줄이는 방향으로 파라미터를 업데이트할 때, 얼마나 큰 보폭으로 움직일지를 결정하는 매우 중요한 값입니다. 이 값이 너무 크면 최적점을 지나쳐 버릴 수 있고, 너무 작으면 학습 속도가 매우 느려집니다. 0.5는 비교적 큰 학습률로, 빠르게 학습을 진행하겠다는 의도입니다."],"metadata":{"id":"FAJCaHlqCbp5"}},{"cell_type":"code","source":["# 최적화를 위한 function을 정의합니다.\n","@tf.function\n","def train_step(model, x, y):\n","  with tf.GradientTape() as tape:\n","    y_pred = model(x)\n","    loss = cross_entropy_loss(y_pred, y)\n","  gradients = tape.gradient(loss, model.trainable_variables)\n","  optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n"],"metadata":{"id":"9HP-O5TvpbSo","executionInfo":{"status":"ok","timestamp":1755327624355,"user_tz":-540,"elapsed":4,"user":{"displayName":"똥깡아제","userId":"13219049976116428546"}}},"execution_count":19,"outputs":[]},{"cell_type":"markdown","source":["이 코드는 모델을 한 걸음 학습시키는, 훈련 과정의 가장 핵심적인 부분을 정의합니다. train_step 함수가 한 번 호출될 때마다, 모델은 데이터를 보고 조금 더 똑똑해집니다.\n","\n","- 예측 및 손실 계산 : **GradientTape**이라는 녹화 장치로 모델이 예측하고(model(x)) 틀린 정도를 계산하는(cross_entropy_loss) 전 과정을 기록합니다.\n","\n","- 방향 찾기 (기울기 계산) : 녹화된 내용을 바탕으로 손실(loss)을 가장 효과적으로 줄일 수 있는 방향, 즉 각 파라미터(W, b)를 어느 쪽으로 얼마나 조절해야 하는지에 대한 정보(기울기)를 계산합니다.\n","\n","- 모델 업데이트 (한 걸음 전진) : 찾아낸 방향(기울기)대로 옵티마이저가 모델의 파라미터를 실제로 수정하여 모델을 조금 더 똑똑하게 만듭니다. 이 과정이 바로 학습입니다."],"metadata":{"id":"fFxyrNLopb3_"}},{"cell_type":"markdown","source":[],"metadata":{"id":"U0XjiBcOq_Ue"}},{"cell_type":"code","source":["# 모델의 정확도를 출력하는 함수를 정의합니다.\n","@tf.function\n","def compute_accuracy(y_pred, y):\n","  correct_prediction = tf.equal(tf.argmax(y_pred,1), tf.argmax(y,1))\n","  accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n","\n","  return accuracy\n","\n","# SoftmaxRegression 모델을 선언합니다.\n","SoftmaxRegression_model = SoftmaxRegression()\n","\n","# 1000번 반복을 수행하면서 최적화를 수행합니다.\n","for i in range(1000):\n","  batch_xs, batch_ys = next(train_data_iter)\n","  train_step(SoftmaxRegression_model, batch_xs, batch_ys)\n","\n","# 학습이 끝나면 학습된 모델의 정확도를 출력합니다.\n","print(\"정확도(Accuracy): %f\" % compute_accuracy(SoftmaxRegression_model(x_test), y_test)) # 정확도 : 약 91%"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B9O4L38Bq_pu","executionInfo":{"status":"ok","timestamp":1755327629839,"user_tz":-540,"elapsed":1794,"user":{"displayName":"똥깡아제","userId":"13219049976116428546"}},"outputId":"ea9a8547-f763-4605-959f-d29dc15f770d"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["정확도(Accuracy): 0.914700\n"]}]},{"cell_type":"markdown","source":["모든 준비가 끝났습니다. 이제 기계에게 학습을 시키고, 시험을 볼 시간입니다!\n","\n","- SoftmaxRegression_model = ...: \"우리가 설계한 모델의 실체를 만듭니다.\"\n","\n","- for i in range(1000):: \"학습을 1000번 반복하라는 학습 루프입니다.\"\n","\n","- next(train_data_iter): \"데이터 파이프라인에서 다음 미니배치(이미지 100개와 정답)를 꺼내옵니다.\"\n","\n","- train_step(...): \"그리고 그 미니배치로 모델을 한 걸음 학습시킵니다. 이 과정이 1000번 반복되면서 모델은 점점 똑똑해지겠죠.\"\n","\n","- print(...): \"1000번의 학습이 끝난 후, 모델이 한 번도 본 적 없는 **시험용 데이터(x_test)**로 최종 시험을 봅니다. 그리고 그 정확도를 출력하는 거죠.\"\n","\n","- 약 91%의 정확도가 나왔습니다! 우리가 배운 기본 개념들만으로 만든 아주 간단한 모델이, 손글씨 숫자를 10번 중 9번은 맞춘다는 뜻입니다."],"metadata":{"id":"fdobF_OatD5c"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","\n","# 학습이 끝난 모델로 테스트 데이터에 대한 예측 수행\n","predictions = SoftmaxRegression_model(x_test)\n","\n","# 결과를 보여줄 이미지 개수\n","num_images = 15\n","\n","# matplotlib을 이용해 이미지와 예측 결과를 함께 출력\n","plt.figure(figsize=(12, 6))\n","for i in range(num_images):\n","    plt.subplot(3, 5, i + 1) # 3x5 그리드에 이미지 표시\n","\n","    # 원본 이미지 (784 -> 28x28)\n","    image_to_show = np.reshape(x_test[i], [28, 28])\n","    plt.imshow(image_to_show, cmap='gray')\n","\n","    # 실제 정답과 모델의 예측\n","    true_label = np.argmax(y_test[i])\n","    predicted_label = np.argmax(predictions[i])\n","\n","    # 예측이 맞으면 파란색, 틀리면 빨간색으로 제목 표시\n","    title_color = 'blue' if true_label == predicted_label else 'red'\n","    plt.title(f\"True: {true_label}\\nPred: {predicted_label}\", color=title_color)\n","    plt.axis('off') # 축 정보 끄기\n","\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":543},"id":"swwWhiYvvwi6","executionInfo":{"status":"ok","timestamp":1755328746137,"user_tz":-540,"elapsed":622,"user":{"displayName":"똥깡아제","userId":"13219049976116428546"}},"outputId":"f968efc1-9c95-4e94-d27b-427ede7552ad"},"execution_count":36,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 15 Axes>"],"image/png":"\n"},"metadata":{}}]}]}